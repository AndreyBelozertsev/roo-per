<?php

namespace Portal\UserBundle\Entity\Repository;

/**
 * RoleToUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleToUserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Remove all roles
     * @param int $workerId
     * @return mixed
     */
    public function unsetRoles($workerId)
    {
        $dc = $this->getEntityManager()->getConnection();

        $sql = "DELETE " .
            "FROM user_role2user roleToUser " .
            "WHERE roleToUser.user_id = " . (int)$workerId
        ;

        $dc->executeQuery($sql);

        return true;
    }

    /**
     * Is Granted
     * @param $permissionCode
     * @param string $instanceCode
     * @param int $userId
     *
     * @return mixed
     */
    public function isGranted($permissionCode, $instanceCode = 'main', $userId = 9)
    {
        $queryBuilder = $this->createQueryBuilder('roleToUser');
        $queryBuilder
            ->select('count(roleToPermission.id)')
            ->leftJoin('roleToUser.user', 'userObj')
            ->leftJoin('roleToUser.role', 'roleObj')
            ->leftJoin('roleToUser.instance', 'instancebj')
            ->leftJoin('roleObj.permissions', 'roleToPermission')
            ->leftJoin('roleToPermission.permission', 'permission')
            ->where('userObj.id = :userId')
            ->andWhere('permission.code = :permissionCode')
            ->andWhere('instancebj.code = :instanceCode')
            ->setParameter('userId', $userId)
            ->setParameter('permissionCode', $permissionCode)
            ->setParameter('instanceCode', $instanceCode)
        ;

        return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function findGrantedInstancesByUserId($userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT instance_id'
            . ' FROM user_role2user'
            . ' WHERE user_id = ' . (int)$userId
        ;

        return $dc->fetchAll($sql);
    }
}
