<?php

namespace Portal\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * Returns number of pages
     *
     * @param int $per_page
     * @param \Doctrine\DBAL\Connection $dc
     * @return int
     */
    public function getUserPages($per_page, $dc)
    {
        $sql = 'SELECT COUNT(id)'
            . ' FROM portal_user'
        ;

        $result = $dc->fetchAssoc($sql)['count'];
        $pages = ceil($result / $per_page);

        return ($pages > 0) ? $pages : 1;
    }

    /**
     * Get Users count
     *
     * @param \Doctrine\DBAL\Connection $dc
     *
     * @return integer
     */
    public function getUsersCount($dc)
    {
        $sql = 'SELECT count(id) AS userscount'
            . ' FROM portal_user'
        ;

        $rows = $dc->fetchAll($sql);

        return $rows[0]['userscount'] ?? 0;
    }

    /**
     * Get Users info
     *
     * @return array
     */
    public function getUsersInfo()
    {
        $dc = $this->getEntityManager()->getConnection();

        $sql = 'SELECT * '
            . ' FROM portal_user'
        ;

        $rows = $dc->fetchAll($sql);

        return $rows;
    }

    /**
     * Get users by user role
     * @param string $userRole
     *
     * @return array
     */
    public function getUsersByRole($userRole)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('u')
            ->from($this->getEntityName(), 'u')
            ->where('u.roles = :userRole')
            ->setParameters([
                'userRole' => serialize([$userRole])
            ])
        ;

        return $qb->getQuery()->getResult();
    }
}
