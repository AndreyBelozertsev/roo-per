<?php

namespace Portal\ContentBundle\Repository;

use Doctrine\DBAL\DBALException;
use Portal\ContentBundle\Entity\Article;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPaginatedList(int $cat, int $page)
    {
        /**
         * @return array
         */
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT a.id, att.preview_file_url,
                    a.title_uk,  a.title_ru, a.title_en,
                    a.views_counter, a.created_at, count(c) AS comments,
                    ac.title_uk AS cat_title_uk, ac.title_ru AS cat_title_ru, ac.title_en AS cat_title_en
                FROM article AS a
                    INNER JOIN article_attachment a_a ON a_a.article_id = a.id
                    INNER JOIN attachment AS att ON att.id = a_a.id
                    LEFT JOIN comment AS c ON a.id = c.article_id AND c.ispublished IS TRUE
                    INNER JOIN article_category AS ac ON a.category_id = ac.id
                WHERE a.category_id = ' . $cat . ' AND a.is_deleted IS FALSE AND a.is_published IS TRUE
                GROUP BY a.id, att.preview_file_url, ac.title_uk, ac.title_ru, ac.title_en
                ORDER BY a.created_at DESC
                LIMIT ' . Article::PAGE_PAGINATION_LIMIT . '
                OFFSET ' . (int)$page * Article::PAGE_PAGINATION_LIMIT . '
        ';

        return $dc->fetchAll($sql) ?: [];
    }

    /**
     * @param int $cat
     * @return int|mixed
     */
    public function getArticleCount(int $cat)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT count(*)
                FROM article AS a
                WHERE a.category_id = ' . $cat . ' AND a.is_deleted IS FALSE AND a.is_published IS TRUE
        ';
        try {
            $count = $dc->executeQuery($sql)->fetch(\PDO::FETCH_COLUMN);
        } catch (DBALException $e) {
        }

        return $count ?? false;
    }

    /**
     * Latest news
     * @return array
     */
    public function getLastArticleList()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT
                  a.id AS article_id,
                  a.title_uk AS article_title_uk,
                  a.title_ru AS article_title_ru,
                  a.title_en AS article_title_en,
                  a.published_at AS article_published_at,
                  att.preview_file_url AS thumbnail,
                  ac.title_uk AS category_title_uk,
                  ac.title_ru AS category_title_ru,
                  ac.title_en AS category_title_en
                FROM article AS a
                    INNER JOIN article_attachment a_a ON a_a.article_id = a.id
                    INNER JOIN attachment AS att ON att.id = a_a.id
                    LEFT JOIN article_category ac ON a.category_id = ac.id
                WHERE a.is_published IS TRUE AND a.is_deleted IS NOT TRUE AND ac.is_published IS TRUE
                ORDER BY a.published_at DESC
                LIMIT ' . Article::POPULAR_ARTICLES_LIMIT_ON_NEWS_PAGE;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getAllArticleForPagination($filterParam, $cat)
    {
        $dc = $this->getEntityManager()->getConnection();

        $params = [];
        if (isset($filterParam['filterTitleUk']) && $filterParam['filterTitleUk'] !== '') {
            $params[] = 'LOWER(a.title_uk) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleUk'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterTitleRu']) && $filterParam['filterTitleRu'] !== '') {
            $params[] = 'LOWER(a.title_ru) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleRu'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterTitleEn']) && $filterParam['filterTitleEn'] !== '') {
            $params[] = 'LOWER(a.title_en) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleEn'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterCreateFrom']) && $filterParam['filterCreateFrom'] !== '') {
            $params[] = 'a.created_at >= \'' . date('d.m.Y', strtotime($filterParam['filterCreateFrom'])) . '\'';
        }
        if (isset($filterParam['filterCreateTo']) && $filterParam['filterCreateTo'] !== '') {
            $params[] = 'a.created_at <= \'' . date('d.m.Y',
                    strtotime($filterParam['filterCreateTo'] . '+1 day')) . '\'';
        }
        if (isset($filterParam['filterPublishFrom']) && $filterParam['filterPublishFrom'] !== '') {
            $params[] = 'a.published_at >= \'' . date('d.m.Y', strtotime($filterParam['filterPublishFrom'])) . '\'';
        }
        if (isset($filterParam['filterPublishTo']) && $filterParam['filterPublishTo'] !== '') {
            $params[] = 'a.published_at <= \'' . date('d.m.Y',
                    strtotime($filterParam['filterPublishTo'] . '+1 day')) . '\'';
        }

        $published = (isset($filterParam['filterPublished']) && $filterParam['filterPublished'] === 'true');
        $notPublished = (isset($filterParam['filterPublished']) && $filterParam['filterNotPublished'] === 'true');
        if ($published xor $notPublished) {
            $params[] = 'a.is_published IS ' . ($published ? 'TRUE' : 'FALSE');
        }

        $params[] = 'a.category_id = ' . (int)$cat;

        $where = (count($params) !== 0) ? ' WHERE ' . implode(' AND ', $params) : '';

        $sql = 'SELECT a.id as article_id, a.title_uk as article_title_uk, a.title_ru as article_title_ru, a.title_en as article_title_en'
            . ' , a.is_important, a.original_instance_code'
            . ' , a.published_at as article_published_at, a.author_id'
            . ' , a.subtitle_uk as article_subtitle_uk, a.subtitle_ru as article_subtitle_ru, a.subtitle_en as article_subtitle_en '
            . ' , a.is_published, a.is_hot, a.is_deleted, a.original_article_id, a.category_id'
//            . ' , array_to_string(ARRAY(SELECT tag FROM article_to_tag AS a2t LEFT JOIN tag AS t ON a2t.tag_id = t.id WHERE a2t.article_id = a.id), \', \', \'\') AS tags'
            . ' FROM article AS a'
            . $where
            . ' ORDER BY a.published_at DESC, a.id DESC';

        return $dc->fetchAll($sql) ?: [];
    }

    /**
     * @param string $queryStr
     * @param int $page
     * @return array|false
     * @throws DBALException
     */
    public function searchArticle(string $queryStr, int $page = 0)
    {
        $params = [
            'str' => '%' . $queryStr . '%',
            'limit' => Article::PAGE_PAGINATION_LIMIT,
            'offset' => $page * Article::PAGE_PAGINATION_LIMIT
        ];
        $types = [
            'str' => \PDO::PARAM_STR,
            'limit' => \PDO::PARAM_INT,
            'offset' => \PDO::PARAM_INT
        ];
        $sql = 'SELECT a.id, att.preview_file_url,
                    a.title_uk,  a.title_ru, a.title_en,
                    a.content_uk,  a.content_ru, a.content_en,
                    a.views_counter, a.created_at, count(c) AS comments,
                    ac.title_uk AS cat_title_uk, ac.title_ru AS cat_title_ru, ac.title_en AS cat_title_en
                FROM article AS a
                    INNER JOIN article_attachment a_a ON a_a.article_id = a.id
                    INNER JOIN attachment AS att ON att.id = a_a.id
                    LEFT JOIN comment AS c ON a.id = c.article_id AND c.ispublished IS TRUE
                    INNER JOIN article_category AS ac ON a.category_id = ac.id
                WHERE a.is_published = TRUE AND a.is_deleted <> TRUE AND
                    (a.title_ru ILIKE :str OR
                     a.title_uk ILIKE :str OR
                     a.content_ru ILIKE :str OR
                     a.content_uk ILIKE :str)
                GROUP BY a.id, att.preview_file_url, ac.title_uk, ac.title_ru, ac.title_en
                ORDER BY a.created_at DESC
                LIMIT :limit
                OFFSET :offset
        ';
        $dc = $this->getEntityManager()->getConnection();

        return $dc->executeQuery($sql, $params, $types)->fetchAll() ?: false;
    }

    /**
     * @param string $queryStr
     * @return int
     * @throws DBALException
     */
    public function countSearchArticle(string $queryStr)
    {
        $str = '%' . $queryStr . '%';
        $sql = 'SELECT count(*)
                FROM article AS a
                WHERE a.is_published = TRUE AND a.is_deleted <> TRUE AND
                    (a.title_ru ILIKE :str OR
                     a.title_uk ILIKE :str OR
                     a.content_ru ILIKE :str OR
                     a.content_uk ILIKE :str)
        ';
        $dc = $this->getEntityManager()->getConnection();

        return (int)$dc->executeQuery($sql, ['str' => $str])->fetchColumn();
    }
}
