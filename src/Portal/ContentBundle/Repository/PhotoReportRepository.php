<?php

namespace Portal\ContentBundle\Repository;

use Portal\ContentBundle\Entity\PhotoReport;

/**
 * PhotoReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhotoReportRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAttachmentListPhotoReportById($id)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT pr_att.id AS photo_report_attachment_id, att.preview AS label'
            . ', att.file_description_uk AS photo_report_attachment_description_uk '
            . ', att.file_description_ru AS photo_report_attachment_description_ru '
            . ', att.file_description_en AS photo_report_attachment_description_en '
                . ', pr_att.id AS photo_report_attachment_id'
                . ', att.preview_file_url AS pr_att_file_url'
            . ' FROM photo_report AS pr'
            . ' INNER JOIN photo_report_attachment AS pr_att ON pr.id = pr_att.photo_report_id'
            . ' INNER JOIN attachment AS att ON att.id = pr_att.id'
            . ' WHERE pr.id = ' . (int)$id . ' AND pr_att.is_deleted IS FALSE'
            . ' ORDER BY pr_att.sort ASC'
        ;

        return $dc->fetchAll($sql) ?: false;
    }

    public function getPhotoReportList($limit, $offset)
    {
        $_LIMIT = $limit ? ' LIMIT ' . $limit . ' OFFSET ' . $offset : '';

        $dc = $this->getEntityManager()->getConnection();
        $sql = "SELECT
                    pr.id AS photo_report_id,
                    pr.title AS photo_report_title,
                    pr.description_uk AS photo_report_description_uk,
                    pr.description_ru AS photo_report_description_ru,
                    pr.description_en AS photo_report_description_en,
                    pr.published_at AS photo_report_published_at,
                    pr.views_counter,
                    (SELECT preview
                        FROM attachment, photo_report_attachment
                        WHERE photo_report_attachment.photo_report_id = pr.id
                            AND photo_report_attachment.id = attachment.id
                            AND photo_report_attachment.is_deleted IS NOT TRUE
                        LIMIT 1) AS preview,
                    (SELECT preview_file_url
                        FROM attachment, photo_report_attachment
                        WHERE photo_report_attachment.photo_report_id = pr.id
                            AND photo_report_attachment.id = attachment.id
                            AND photo_report_attachment.is_deleted IS NOT TRUE
                        LIMIT 1) AS photo_report_file_url,
                    count(pr.id)
                FROM photo_report AS pr
                    LEFT JOIN photo_report_attachment AS pra ON pr.id = pra.photo_report_id
                WHERE pr.is_published IS TRUE
                    AND pr.is_deleted IS FALSE
                    AND pra.is_deleted IS FALSE
                GROUP BY pr.id
                ORDER BY pr.published_at DESC
                $_LIMIT"
        ;

        return $dc->fetchAll($sql) ?: false;
    }

    public function getStructurePhotoReportList($structureId, $offset)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT pr.id AS photo_report_id, pr.title AS photo_report_title'
            . ' , pr.description_uk AS photo_report_description_uk, pr.description_ru AS photo_report_description_ru, pr.description_en AS photo_report_description_en '
            . ' , pr.published_at AS photo_report_published_at '
            . ' , (SELECT preview FROM attachment, photo_report_attachment WHERE photo_report_attachment.photo_report_id = pr.id AND photo_report_attachment.id = attachment.id LIMIT 1) AS preview '
            . ' , (SELECT preview_file_url FROM attachment, photo_report_attachment WHERE photo_report_attachment.photo_report_id = pr.id AND photo_report_attachment.id = attachment.id LIMIT 1) AS photo_report_file_url '
            . ' FROM photo_report AS pr '
            . ' WHERE pr.is_published IS true '
            . ' AND pr.is_deleted IS false '
            . ' AND pr.menu_node_id = ' . $structureId
            . ' ORDER BY pr.published_at DESC '
            . ' LIMIT ' . PhotoReport::PHOTO_REPORT_LIMIT_ON_PAGE . ' OFFSET ' . $offset
        ;
        $result = $dc->executeQuery($sql)->fetchAll();

        return $result ?: false;
    }

    public function getPhotoReportListCount()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT count(*) '
            . ' FROM photo_report '
            . ' WHERE is_published IS TRUE AND is_deleted IS FALSE'
        ;
        $result = $dc->executeQuery($sql)->fetchColumn();

        return $result ?: 0;
    }

    public function getStructurePhotoReportListCount($structureId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT count(*) '
            . ' FROM photo_report '
            . ' WHERE is_published IS TRUE AND is_deleted IS FALSE'
            . ' AND menu_node_id = ' . $structureId
        ;
        $result = $dc->executeQuery($sql)->fetchColumn();

        return $result ?: 0;
    }

    public function getAllPhotoReport()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT pr.id AS photo_report_id, pr.title AS photo_report_title, pr.published_at AS photo_report_published_at'
                . ', pr.is_published AS photo_report_is_published, pr.description_uk AS photo_report_description_uk'
                . ', pr.description_ru AS photo_report_description_ru, pr.description_en AS photo_report_description_en'
                . ', pr.is_deleted, pr.author_id'
                . ', (SELECT preview'
                    . ' FROM attachment, photo_report_attachment'
                    . ' WHERE photo_report_attachment.photo_report_id = pr.id AND photo_report_attachment.id = attachment.id'
                    . ' LIMIT 1) AS preview'
                . ', (SELECT preview_file_url'
                    . ' FROM attachment, photo_report_attachment'
                    . ' WHERE photo_report_attachment.photo_report_id = pr.id AND photo_report_attachment.id = attachment.id'
                    . ' LIMIT 1) AS photo_report_file_url'
            . ' FROM photo_report AS pr'
            . ' ORDER BY pr.published_at DESC'
        ;

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getAllPhotoReportForSearchGrab($minId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $minId = (int) $minId;
        $sql = "SELECT id, title, published_at, description_uk, description_ru, description_en FROM photo_report WHERE id > {$minId} ORDER BY id ASC";
        $result = $dc->executeQuery($sql)->fetchAll();

        return $result;
    }
    
    public function getAllPhotoReportForSearchUpdate($maxId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $maxId = (int) $maxId;
        $sql = "SELECT id, title, published_at, description_uk, description_ru, description_en FROM photo_report WHERE id <= {$maxId} AND is_search_indexed = FALSE ORDER BY id ASC";
        $result = $dc->executeQuery($sql)->fetchAll();

        return $result;
    }
    
    
    /**
     * @param array $indexedPhotoReportsId
     * @return bool
     */
    public function updateIsSearchIndexedFlag($indexedPhotoReportsId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $result = FALSE;
        
        if (!empty($indexedPhotoReportsId)) {
            $sql = 'UPDATE photo_report SET is_search_indexed = TRUE
                    WHERE id IN (' . implode(', ', $indexedPhotoReportsId) . ') ';
            $result = $dc->exec($sql);
        }
        
        if($result) {
            return true;
        } else {
            return false;
        }
    }

    public function getAttachmentListById($id)
    {
        $sql = 'SELECT
                   a.preview_file_url, a.file_description_uk, a.file_description_ru, a.file_description_en,
                   pr.description_uk, pr.description_ru, pr.description_en
                FROM photo_report_attachment AS pra
                   LEFT JOIN attachment a ON pra.id = a.id
                   LEFT JOIN photo_report pr ON pra.photo_report_id = pr.id
                WHERE pra.is_deleted IS NOT TRUE AND pra.photo_report_id = ' . (int)$id . '
                ORDER BY a.id DESC
        ';

        return $this->getEntityManager()->getConnection()->fetchAll($sql) ?: false;
    }
}
