<?php

namespace Portal\ContentBundle\Repository;

/**
 * QuizRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuizRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllQuiz()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT q.id as quiz_id, q.title as quiz_title, q.date_start as quiz_date_start,
                  q.date_end as quiz_date_end, q.is_published as quiz_is_published, q.author_id
                FROM quiz AS q
                ORDER BY q.date_start DESC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getListAnswerQuiz($quizId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            ' SELECT qq.id AS question_id, qq.content AS question_content '
            . ' , qa.id AS answer_id '
            .' , qa.content AS answer_content '
            . ' FROM quiz AS q '
            . ' INNER JOIN quiz_question AS qq ON qq.quiz_id = q.id '
            . ' INNER JOIN quiz_answer AS qa ON qa.question_id = qq.id '
            . ' WHERE q.id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
            . ' ORDER BY qq.id, qa.id ASC '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getCorrectAnswerList($quizId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qq.id AS question_id ' .
            ' , qa.id AS answer_id '
            . ' FROM quiz_question AS qq '
            . ' INNER JOIN quiz_answer AS qa ON qa.question_id = qq.id '
            . ' WHERE qq.quiz_id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
            . ' AND qa.is_correct IS true '
            . ' ORDER BY qq.id ASC '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getCorrectAnswerForQuestion($questionId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qa.id '
            . ' FROM quiz_answer AS qa '
            . ' WHERE qa.question_id = ' . $dc->quote($questionId, \PDO::PARAM_INT)
            . ' AND qa.is_correct '
        ;
        return $dc->executeQuery($sql)->fetchColumn() ?: false;
    }

    public function getQuestionAnswerList($questionId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qa.id AS answer_id '
            . ' , qa.content AS answer_content '
            . ' , qa.question_id AS answer_question_id '
            . ' FROM quiz_answer AS qa '
            . ' WHERE qa.question_id = ' . $dc->quote($questionId, \PDO::PARAM_INT)
            . ' ORDER BY qa.id ASC '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getQuestion($quizId, $numQuestion)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qq.id AS question_id '
            . ' , qq.content AS question_content'
            . ' FROM quiz_question AS qq '
            . ' WHERE qq.quiz_id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
            . ' ORDER BY qq.id ASC '
            . ' LIMIT 1 '
            . ' OFFSET ' . $dc->quote($numQuestion - 1, \PDO::PARAM_INT)
        ;
        return $dc->executeQuery($sql)->fetch() ?: false;
    }
}
