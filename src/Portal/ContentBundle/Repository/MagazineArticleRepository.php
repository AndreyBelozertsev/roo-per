<?php

namespace Portal\ContentBundle\Repository;

use Doctrine\DBAL\DBALException;
use Portal\ContentBundle\Entity\MagazineArticle;

/**
 * MagazineArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MagazineArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPaginatedList(int $magazine, int $page)
    {
        /**
         * @return array
         */
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT m_a.id, att.preview_file_url,
                    m_a.title_uk,  m_a.title_ru, m_a.title_en,
                    m_a.views_counter, m_a.created_at,
                    m_ac.title_uk AS magazine_title_uk, m_ac.title_ru AS magazine_title_ru, m_ac.title_en AS magazine_title_en
                FROM magazine_article AS m_a
                    INNER JOIN magazine_article_attachment m_a_a ON m_a_a.article_id = m_a.id
                    INNER JOIN attachment AS att ON att.id = m_a_a.id
                    INNER JOIN magazine_newspaper AS m_ac ON m_a.magazine_id = m_ac.id
                WHERE m_a.magazine_id = ' . $magazine . ' AND m_a.is_deleted IS FALSE AND m_a.is_published IS TRUE
                GROUP BY m_a.id, att.preview_file_url, m_ac.title_uk, m_ac.title_ru, m_ac.title_en
                ORDER BY m_a.created_at DESC
                LIMIT ' . MagazineArticle::PAGE_PAGINATION_LIMIT . '
                OFFSET ' . (int)$page * MagazineArticle::PAGE_PAGINATION_LIMIT . '
        ';

        return $dc->fetchAll($sql) ?: [];
    }

    /**
     * @param int $cat
     * @return int|mixed
     */
    public function getMagazineArticleCount(int $magazine)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT count(*)
                FROM magazine_article AS m_a
                WHERE m_a.category_id = ' . $magazine . ' AND m_a.is_deleted IS FALSE AND m_a.is_published IS TRUE
        ';
        try {
            $count = $dc->executeQuery($sql)->fetch(\PDO::FETCH_COLUMN);
        } catch (DBALException $e) {
        }

        return $count ?? false;
    }

    /**
     * Latest news
     * @return array
     */
    public function getPopularMagazineArticleList()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT
                  m_a.id AS magazine_article_id,
                  m_a.title_uk AS magazine_article_title_uk,
                  m_a.title_ru AS magazine_article_title_ru,
                  m_a.title_en AS magazine_article_title_en,
                  m_a.published_at AS magazine_article_published_at
                FROM magazine_article AS m_a
                    LEFT JOIN magazine_newspaper mac ON m_a.magazine_id = mac.id
                WHERE m_a.is_published IS TRUE AND m_a.is_deleted IS NOT TRUE AND mac.is_published IS TRUE
                ORDER BY m_a.published_at DESC
                LIMIT ' . MagazineArticle::POPULAR_ARTICLES_LIMIT_ON_NEWS_PAGE;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getAllMagazineArticleForPagination($filterParam, $magazine)
    {
        $dc = $this->getEntityManager()->getConnection();

        $params = [];
        if (isset($filterParam['filterTitleUk']) && $filterParam['filterTitleUk'] !== '') {
            $params[] = 'LOWER(m_a.title_uk) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleUk'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterTitleRu']) && $filterParam['filterTitleRu'] !== '') {
            $params[] = 'LOWER(m_a.title_ru) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleRu'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterTitleEn']) && $filterParam['filterTitleEn'] !== '') {
            $params[] = 'LOWER(m_a.title_en) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitleEn'],
                    'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterCreateFrom']) && $filterParam['filterCreateFrom'] !== '') {
            $params[] = 'm_a.created_at >= \'' . date('d.m.Y', strtotime($filterParam['filterCreateFrom'])) . '\'';
        }
        if (isset($filterParam['filterCreateTo']) && $filterParam['filterCreateTo'] !== '') {
            $params[] = 'm_a.created_at <= \'' . date('d.m.Y',
                    strtotime($filterParam['filterCreateTo'] . '+1 day')) . '\'';
        }
        if (isset($filterParam['filterPublishFrom']) && $filterParam['filterPublishFrom'] !== '') {
            $params[] = 'm_a.published_at >= \'' . date('d.m.Y', strtotime($filterParam['filterPublishFrom'])) . '\'';
        }
        if (isset($filterParam['filterPublishTo']) && $filterParam['filterPublishTo'] !== '') {
            $params[] = 'm_a.published_at <= \'' . date('d.m.Y',
                    strtotime($filterParam['filterPublishTo'] . '+1 day')) . '\'';
        }

        $published = (isset($filterParam['filterPublished']) && $filterParam['filterPublished'] === 'true');
        $notPublished = (isset($filterParam['filterPublished']) && $filterParam['filterNotPublished'] === 'true');
        if ($published xor $notPublished) {
            $params[] = 'm_a.is_published IS ' . ($published ? 'TRUE' : 'FALSE');
        }

        $params[] = 'm_a.magazine_id = ' . (int)$magazine;

        $where = (count($params) !== 0) ? ' WHERE ' . implode(' AND ', $params) : '';

        $sql = 'SELECT m_a.id as article_id, m_a.title_uk as article_title_uk, m_a.title_ru as article_title_ru, m_a.title_en as article_title_en'
            . ' , m_a.original_instance_code'
            . ' , m_a.published_at as magazine_article_published_at, m_a.author_id'
            . ' , m_a.subtitle_uk as magazine_article_subtitle_uk, m_a.subtitle_ru as magazine_article_subtitle_ru, m_a.subtitle_en as magazine_article_subtitle_en'
            . ' , m_a.is_published, m_a.is_deleted, m_a.original_magazine_article_id, m_a.magazine_id'
            . ' , m_a.sort'
//            . ' , array_to_string(ARRAY(SELECT tag FROM article_to_tag AS a2t LEFT JOIN tag AS t ON a2t.tag_id = t.id WHERE a2t.article_id = a.id), \', \', \'\') AS tags'
            . ' FROM magazine_article AS m_a'
            . $where
            . ' ORDER BY m_a.sort ASC, m_a.published_at DESC, m_a.id DESC';

        return $dc->fetchAll($sql) ?: [];
    }

    /**
     * @param string $queryStr
     * @param int $page
     * @return array|false
     * @throws DBALException
     */
    public function searchArticle(string $queryStr, int $page = 0)
    {
        $params = [
            'str' => '%' . $queryStr . '%',
            'limit' => Article::PAGE_PAGINATION_LIMIT,
            'offset' => $page * Article::PAGE_PAGINATION_LIMIT
        ];
        $types = [
            'str' => \PDO::PARAM_STR,
            'limit' => \PDO::PARAM_INT,
            'offset' => \PDO::PARAM_INT
        ];
        $sql = 'SELECT m_a.id, att.preview_file_url,
                    m_a.title_uk,  m_a.title_ru, m_a.title_en,
                    m_a.content_uk,  m_a.content_ru, m_a.content_en,
                    m_a.views_counter, m_a.created_at,
                    mac.title_uk AS magazine_title_uk, mac.title_ru AS magazine_title_ru, mac.title_en AS magazine_title_en
                FROM magazine_article AS m_a
                    INNER JOIN magazine_article_attachment m_a_a ON m_a_a.article_id = m_a.id
                    INNER JOIN attachment AS att ON att.id = m_a_a.id
                    INNER JOIN magazine_newspaper AS mac ON m_a.magazine_id = mac.id
                WHERE m_a.is_published = TRUE AND m_a.is_deleted <> TRUE AND
                    (m_a.title_ru ILIKE :str OR
                     m_a.title_uk ILIKE :str OR
                     m_a.content_ru ILIKE :str OR
                     m_a.content_uk ILIKE :str)
                GROUP BY m_a.id, att.preview_file_url, mac.title_uk, mac.title_ru, mac.title_en
                ORDER BY m_a.created_at DESC
                LIMIT :limit
                OFFSET :offset
        ';
        $dc = $this->getEntityManager()->getConnection();

        return $dc->executeQuery($sql, $params, $types)->fetchAll() ?: false;
    }

    /**
     * @param string $queryStr
     * @return int
     * @throws DBALException
     */
    public function countSearchMagazineArticle(string $queryStr)
    {
        $str = '%' . $queryStr . '%';
        $sql = 'SELECT count(*)
                FROM magazine_article AS m_a
                WHERE m_a.is_published = TRUE AND m_a.is_deleted <> TRUE AND
                    (m_a.title_ru ILIKE :str OR
                     m_a.title_uk ILIKE :str OR
                     m_a.content_ru ILIKE :str OR
                     m_a.content_uk ILIKE :str)
        ';
        $dc = $this->getEntityManager()->getConnection();

        return (int)$dc->executeQuery($sql, ['str' => $str])->fetchColumn();
    }
}
