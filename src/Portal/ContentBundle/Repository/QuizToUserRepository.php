<?php

namespace Portal\ContentBundle\Repository;

/**
 * QuizToUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuizToUserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getQuizListForUser($userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            ' SELECT q.title '
            . ' , q.id AS quiz_id '
            . ' FROM quiz2user AS q2u '
            . ' INNER JOIN quiz AS q ON q2u.quiz_id = q.id '
            . ' WHERE q2u.user_id = ' . $dc->quote($userId, \PDO::PARAM_INT)
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getQuizStatisticForUser($quizId, $userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            ' SELECT q2u.correct_answer '
            . ' , q2u.is_good_result '
            . ' FROM quiz2user AS q2u '
            . ' WHERE q2u.user_id = ' . $dc->quote($userId, \PDO::PARAM_INT)
            . ' AND q2u.quiz_id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
        ;
        return $dc->executeQuery($sql)->fetch() ?: [];
    }

    public function getInterviewListForUser($userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            ' SELECT i.title '
            . ' , i.id AS interview_id '
            . ' FROM interview_user_answer AS iua '
            . ' INNER JOIN interview_answer AS ia ON iua.interview_answer_id = ia.id '
            . ' INNER JOIN interview_question AS iq ON ia.interview_question_id = iq.id '
            . ' INNER JOIN interview AS i ON iq.interview_id = i.id '
            . ' WHERE iua.user_id = ' . $dc->quote($userId, \PDO::PARAM_INT)
            . ' GROUP BY i.id '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getListUserAnswerInterview($interviewId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            ' SELECT ia.id '
            . ' , ia.content '
            . ' FROM interview_user_answer AS iua '
            . ' INNER JOIN interview_answer AS ia ON iua.interview_answer_id = ia.id '
            . ' INNER JOIN interview_question AS iq ON ia.interview_question_id = iq.id '
            . ' INNER JOIN interview AS i ON iq.interview_id = i.id '
            . ' WHERE i.id = ' . $dc->quote($interviewId, \PDO::PARAM_INT)
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }
/*
    public function getCorrectAnswerList($quizId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qq.id AS question_id ' .
            ' , qa.id AS answer_id '
            . ' FROM quiz_question AS qq '
            . ' INNER JOIN quiz_answer AS qa ON qa.question_id = qq.id '
            . ' WHERE qq.quiz_id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
            . ' AND qa.is_correct IS true '
            . ' ORDER BY qq.id ASC '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getCorrectAnswerForQuestion($questionId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qa.id '
            . ' FROM quiz_answer AS qa '
            . ' WHERE qa.question_id = ' . $dc->quote($questionId, \PDO::PARAM_INT)
            . ' AND qa.is_correct '
        ;
        return $dc->executeQuery($sql)->fetchColumn() ?: false;
    }

    public function getQuestionAnswerList($questionId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qa.id AS answer_id '
            . ' , qa.content AS answer_content '
            . ' , qa.question_id AS answer_question_id '
            . ' FROM quiz_answer AS qa '
            . ' WHERE qa.question_id = ' . $dc->quote($questionId, \PDO::PARAM_INT)
            . ' ORDER BY qa.id ASC '
        ;
        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getQuestion($quizId, $numQuestion)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql =
            'SELECT qq.id AS question_id '
            . ' , qq.content AS question_content'
            . ' FROM quiz_question AS qq '
            . ' WHERE qq.quiz_id = ' . $dc->quote($quizId, \PDO::PARAM_INT)
            . ' ORDER BY qq.id ASC '
            . ' LIMIT 1 '
            . ' OFFSET ' . $dc->quote($numQuestion - 1, \PDO::PARAM_INT)
        ;
        return $dc->executeQuery($sql)->fetch() ?: false;
    }
*/
    public function isUserAnswer($quizId, $userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = "
            SELECT 
              CASE WHEN COUNT(q2u.user_id) > 0 THEN TRUE ELSE FALSE END
            FROM quiz2user AS q2u
            WHERE 
                q2u.quiz_id = {$dc->quote($quizId, \PDO::PARAM_INT)}
                AND q2u.user_id = {$dc->quote($userId, \PDO::PARAM_INT)}
        ";
        return $dc->executeQuery($sql)->fetchColumn();
    }
}
