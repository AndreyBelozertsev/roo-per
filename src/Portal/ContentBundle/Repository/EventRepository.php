<?php

namespace Portal\ContentBundle\Repository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
    public function getEventListByDate($date = null)
    {
        $dc = $this->getEntityManager()->getConnection();

        $date = new \DateTime($date);
        $currentDay = $date->format('Y-m-d');

        $sql = 'SELECT e.id AS event_id, e.title as event_title, e.content AS event_content,
                    e.start_date AS event_start_date, e.end_date AS event_end_date,
                    e.original_event_id, e.original_instance_code, e.original_file_path,
                    a.preview_file_url AS file_url, a.preview
                FROM event AS e
                LEFT JOIN event_attachment AS e_a ON e_a.event_id = e.id
                LEFT JOIN attachment AS a ON e_a.id = a.id
                WHERE e.is_published IS TRUE
                    AND e.start_date <= \'' . $currentDay . '\'
                    AND e.end_date >= \'' . $currentDay . '\'
                ORDER BY e.start_date DESC'
        ;

        return $dc->fetchAll($sql) ?: false;
    }

    public function getEventListDayOnMonth($date = null)
    {
        $dc = $this->getEntityManager()->getConnection();
        if ($date == null) {
            $date = new \DateTime();
        } else {
            $date = new \DateTime($date);
        }
        $yearAndMonth = $date->format('m-Y');
        $dateMonth = '01-' . $yearAndMonth;

        $sql = "SELECT to_char(ad, 'DD-MM-YYYY') as active_day"
            . " FROM ("
                . " SELECT DISTINCT(generate_series(e.start_date::timestamp, e.end_date::timestamp, '1 day'::interval) ) as ad"
                . " FROM event AS e WHERE e.is_published is true"
                . " ORDER BY ad"
            . " ) as a"
            . " WHERE ad BETWEEN " . $dc->quote($dateMonth, \PDO::PARAM_STR)
                . " AND date_trunc('month', " . $dc->quote($dateMonth, \PDO::PARAM_STR) . "::timestamp)+interval '1 month'-interval '1 second'"
        ;

        return $dc->executeQuery($sql)->fetchAll(\PDO::FETCH_COLUMN) ?: false;
    }

    public function getActualEventList($startDate = null, $endDate = null, $page = null, $limit = null)
    {
        $dc = $this->getEntityManager()->getConnection();

        $AND_InPeriod = '';
        if ($startDate && $endDate) {
            $AND_InPeriod = ' AND e.start_date < ' . $dc->quote($endDate, \PDO::PARAM_STR) .
                            ' AND e.end_date >= ' . $dc->quote($startDate, \PDO::PARAM_STR);
        }
        $OFFSET = ($limit !== null && $page !== null) ? ' OFFSET ' . (int)$page * (int)$limit : '';
        $LIMIT = ($limit !== null) ? ' LIMIT ' . (int)$limit : '';

        $sql = "SELECT e.id AS event_id, e.title AS event_title, e.content AS event_content, e.published_at AS event_pub_date,
                    e.start_date AS event_start_date, e.original_instance_code, e.original_event_id,
                    e.end_date AS event_end_date, a.preview_file_url AS file_url, a.preview, e.original_file_path
                FROM event AS e
                    LEFT JOIN event_attachment AS e_a ON e_a.event_id = e.id
                    LEFT JOIN attachment AS a ON e_a.id = a.id
                WHERE e.is_published IS TRUE
                    $AND_InPeriod
                ORDER BY e.start_date DESC" .
                $OFFSET .
                $LIMIT
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getActualEventCount($startDate = null, $endDate = null)
    {
        $dc = $this->getEntityManager()->getConnection();

        $AND_InPeriod = '';
        if ($startDate && $endDate) {
            $AND_InPeriod = ' AND e.start_date < ' . $dc->quote($endDate, \PDO::PARAM_STR) .
                            ' AND e.end_date >= ' . $dc->quote($startDate, \PDO::PARAM_STR);
        }

        $sql = 'SELECT COUNT(e.id)
                FROM event AS e
                WHERE e.is_published IS TRUE'
                . $AND_InPeriod
        ;

        return $dc->fetchColumn($sql) ?: false;
    }

    public function getAllEventsForSearchGrab($minId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $minId = (int) $minId;
        $sql = "SELECT id, title, content, slug, published_at FROM event WHERE id > {$minId} ORDER BY id ASC";

        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }
    
    public function getAllEventsForSearchUpdate($maxId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $maxId = (int) $maxId;
        $sql = "SELECT id, title, content, slug, published_at FROM event "
                . "WHERE id <= {$maxId} AND is_search_indexed = FALSE ORDER BY id ASC";

        return $dc->executeQuery($sql)->fetchAll() ?: false;
    }

    public function getAllVisualEvents()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT e.id, e.title, e.start_date, e.end_date, e.original_instance_code, e.original_event_id, e.original_file_path
                FROM event AS e
                WHERE e.is_published is TRUE
                ORDER BY e.start_date DESC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }
    
    
    /**
     * @param array $indexedEventsId
     * @return bool
     */
    public function updateIsSearchIndexedFlag($indexedEventsId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $result = FALSE;
        
        if (!empty($indexedEventsId)) {
            $sql = 'UPDATE event SET is_search_indexed = TRUE
                    WHERE id IN (' . implode(', ', $indexedEventsId) . ') ';
            $result = $dc->exec($sql);
        }
        
        if($result) {
            return true;
        } else {
            return false;
        }
    }
}
