<?php

namespace Portal\ContentBundle\Repository;

use Portal\ContentBundle\Entity\Menu;

/**
 * MenuNodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuNodeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getStructureMenu()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT menu_node.id, menu_node.parent_id, menu_node.menu_id, menu_node.slug, menu_node.title
                    , menu_node.route, menu_node.node_order, st.code AS structure_template_code, menu_node.is_deleted
                    , menu_node.is_separator, menu_node.is_hidden, menu_node.is_published
                FROM menu, menu_node
                LEFT JOIN structure_template AS st ON menu_node.structure_template_id = st.id
                WHERE menu.id = menu_node.menu_id
                    AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                ORDER BY  menu_node.parent_id, menu_node.node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getSiteMap()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT menu_node.id, menu_node.parent_id, menu_node.menu_id, menu_node.slug, menu_node.title
                    , menu_node.route, menu_node.node_order, st.code AS structure_template_code
                    , menu_node.is_separator, menu_node.is_published, menu_node.is_hidden, menu_node.is_deleted
                FROM menu, menu_node
                LEFT JOIN structure_template AS st ON menu_node.structure_template_id = st.id
                WHERE menu.id = menu_node.menu_id
                    AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                ORDER BY menu_node.parent_id, menu_node.node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getRootMenu()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT menu_node.id, menu_node.parent_id, menu_node.menu_id, menu_node.slug, menu_node.title
                  , menu_node.route, menu_node.node_order
                FROM menu, menu_node
                WHERE menu.id = menu_node.menu_id
                    AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                    AND (parent_id IS NULL OR parent_id = 0)
                ORDER BY  menu_node.parent_id, menu_node.node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getStructureMenuMainNodes()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT menu_node.id, menu_node.parent_id, menu_node.menu_id, menu_node.slug, menu_node.title
                    , menu_node.route, menu_node.node_order, menu_node.slug, menu_node.is_hide_childs
                    , menu_node.is_link_on_id, menu_node.is_separator
                FROM menu, menu_node
                WHERE menu.id = menu_node.menu_id
                    AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                    AND (((parent_id IS NULL OR parent_id = 0) AND menu_node.is_main = TRUE)
                        OR parent_id IN (
                            SELECT menu_node.id FROM menu, menu_node
                            WHERE menu.id = menu_node.menu_id
                                AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                                AND (parent_id IS NULL OR parent_id = 0)
                                AND menu_node.is_main = TRUE
                                AND menu_node.is_hidden = FALSE
                                AND menu_node.is_published = TRUE
                        ))
                    AND menu_node.is_published = TRUE
                    AND menu_node.is_hidden = FALSE
                    AND menu_node.is_deleted = FALSE
                ORDER BY menu_node.parent_id, menu_node.node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getStructureMenuNodes()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT menu_node.id, menu_node.parent_id, menu_node.menu_id, menu_node.slug, menu_node.title
                    , menu_node.route, menu_node.node_order, menu_node.slug, menu_node.is_separator, menu_node.is_link_on_id
                FROM menu, menu_node
                WHERE menu.id = menu_node.menu_id
                    AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                    AND (parent_id IS NULL OR parent_id = 0 OR parent_id IN (
                        SELECT menu_node.id FROM menu, menu_node
                        WHERE menu.id = menu_node.menu_id
                            AND menu.code = \'' . Menu::STRUCTURE_MENU . '\'
                            AND (parent_id IS NULL OR parent_id = 0)
                            AND menu_node.is_main <> TRUE
                            AND menu_node.is_hidden = FALSE
                            AND menu_node.is_published = TRUE
                            AND menu_node.is_deleted = FALSE 
                    ))
                    AND menu_node.is_published = TRUE
                    AND menu_node.is_main <> TRUE
                    AND menu_node.is_hidden = FALSE
                    AND menu_node.is_deleted = FALSE
                ORDER BY menu_node.parent_id, menu_node.node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function moveCategory(array $params, $container = null) {
        $value = [];
        foreach ($params as $par) {
            $parent = (int)$par['parent'] ?: 'cast(NULL AS INTEGER)';
            foreach ($par['tree'] as $k => $v) {
                $value[] = '(' . (int)$v . ',' . $parent . ',' . $k . ')';
            }
        }

        $sql = 'UPDATE menu_node AS m SET'
                . ' parent_id = c.parent_id,'
                . ' node_order = c.node_order'
            . ' FROM (VALUES ' . implode(',', $value) . ') AS c(id, parent_id, node_order)'
            . ' WHERE c.id = m.id'
        ;
        if (is_null($container)) {
            $dc = $this->getEntityManager()->getConnection();
        } else {
            $dc = $container->get('doctrine.orm.customer_entity_manager')->getConnection();
        }
        $dc->fetchAll($sql);
    }

    public function renameStrcture($structureId, $newName)
    {
        $dc = $this->getEntityManager()->getConnection();
        $query = 'UPDATE menu_node SET title = :new_name WHERE id = :id';

        $stmt = $dc->prepare($query);
        $stmt->execute(['id' => $structureId, 'new_name' => $newName]);
        $stmt->fetchAll();
    }

    public function getMenuByCode($code = Menu::STRUCTURE_MENU)
    {
        $em = $this->getEntityManager('customer')->getRepository('PortalContentBundle:MenuNode');
        $queryBuilder = $em->createQueryBuilder('m_n')
            ->join('m_n.menu', 'm')
            ->where('m.code = :code')
            ->andWhere('m_n.isDeleted = false')
            ->andWhere('m_n.isPublished = true')
            ->setParameter('code', $code)
            ->getQuery();

        return $queryBuilder->getResult() ?: [];
    }

    public function getParentItemMenById($id)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'WITH RECURSIVE r AS (
                SELECT id, parent_id, title, route
                    FROM menu_node
                WHERE id = :id
                UNION
                    SELECT menu_node.id, menu_node.parent_id, menu_node.title, menu_node.route
                        FROM menu_node
                    JOIN r ON menu_node.id = r.parent_id
                )
                SELECT r.* FROM r ORDER BY id ASC'
        ;

        $stmt = $dc->prepare($sql);
        $stmt->execute(['id' => $id]);
        $result = $stmt->fetchAll();

        return $result ?: false;
    }

    public function getTreeFromNode($route)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'WITH RECURSIVE r AS (
                    SELECT id, parent_id, title, route
                        FROM menu_node
                    WHERE route LIKE ' . $dc->quote($route, \PDO::PARAM_STR) . '
                    UNION
                        SELECT menu_node.id, menu_node.parent_id, menu_node.title, menu_node.route
                            FROM menu_node
                        JOIN r ON menu_node.parent_id = r.id
                )
                SELECT r.* FROM r ORDER BY id ASC'
        ;

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function deleteNode($nodeId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'UPDATE menu_node
                SET is_deleted = TRUE
                WHERE id = ' . (int)$nodeId
        ;

        return $dc->executeQuery($sql);
    }

    public function restoreMenuNode($nodeId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'UPDATE menu_node
                SET is_deleted = FALSE
                WHERE id = ' . (int)$nodeId
        ;

        return $dc->executeQuery($sql);
    }

    public function getAllMenuNodeForPagination($filterParam)
    {
        $dc = $this->getEntityManager()->getConnection();

        $params = [];
        if (isset($filterParam['filterTitle']) && $filterParam['filterTitle'] !== '') {
            $params[] = 'LOWER(mn.title) LIKE \'%' . mb_strtolower($filterParam['filterTitle'], 'UTF-8') . '%\'';
        }

        $where_param  = (count($params) !== 0) ? ' AND ' . implode(' AND ', $params) : '';
        $sql = 'SELECT mn.id as id, mn.title as title '
            . ' FROM menu_node AS mn'
            . ' LEFT JOIN menu AS m ON mn.menu_id = m.id '
            . ' WHERE m.code NOT LIKE \'structure_menu\' '
            . $where_param
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getCountRemovedParents($nodeId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'WITH RECURSIVE tree AS (
                    SELECT *
                    FROM menu_node
                    WHERE id = ' . (int)$nodeId . '
                    UNION ALL
                    SELECT menu_node.*
                    FROM menu_node
                    JOIN tree ON tree.parent_id = menu_node.id
                )
                SELECT count(*)
                FROM tree
                WHERE is_deleted = TRUE'
        ;

        return $dc->fetchColumn($sql);
    }

    public function getRootMenuNodes($menuId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT id, title, slug, route
                FROM menu_node
                WHERE menu_id = ' . (int)$menuId . '
                    AND parent_id IS NULL
                    AND is_hidden IS FALSE
                    AND is_published IS TRUE
                    AND is_deleted IS FALSE
                ORDER BY node_order ASC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getChildMenuNodes($rootNodeIds)
    {
        if (!empty($rootNodeIds)) {
            $dc = $this->getEntityManager()->getConnection();
            $sql = 'SELECT title, route, parent_id, is_hidden AS "isHidden", is_published AS "isPublished"
                FROM menu_node
                WHERE parent_id IN (' . implode(',', $rootNodeIds) . ')
                    AND is_hidden IS FALSE
                    AND is_published IS TRUE
                    AND is_deleted IS FALSE
                ORDER BY title ASC'
            ;

            return $dc->fetchAll($sql) ?: [];
        }
        return [];
    }

    /**
     * @param integer $structureSyncLimit
     * @return array
     */
    public function getAllStructureForSearchGrab($structureSyncLimit)
    {
        $structureSyncLimit = (int) $structureSyncLimit;
        $dc = $this->getEntityManager()->getConnection();
        $sql = "SELECT menu_node.id, menu_node.slug, menu_node.title, menu_node.route, menu_node.is_link_on_id,"
        . " menu_node.before_text, menu_node.after_text, menu_node.created_at"
        . " FROM menu, menu_node"
        . " WHERE menu.id = menu_node.menu_id"
            . " AND menu.code ='" . Menu::STRUCTURE_MENU . "' AND ("
            . " parent_id IS NULL OR parent_id = 0 OR parent_id IN ("
                . " SELECT menu_node.id FROM menu, menu_node"
                . " WHERE menu.id = menu_node.menu_id AND menu.code = '" . Menu::STRUCTURE_MENU . "'"
                . " AND (parent_id IS NULL OR parent_id = 0)  AND menu_node.is_main <> TRUE AND menu_node.is_hidden = FALSE"
                . " AND menu_node.is_published = TRUE AND menu_node.is_deleted = FALSE))"
            . " AND menu_node.is_published = TRUE AND menu_node.is_main <> TRUE AND menu_node.is_hidden = FALSE"
            . " AND menu_node.is_deleted = FALSE AND menu_node.id > {$structureSyncLimit}"
            . " ORDER BY menu_node.id ASC";
        return $dc->fetchAll($sql) ?: [];
    }
    
    /**
     * @param integer $maxId
     * @return array
     */
    public function getAllStructureForSearchUpdate($maxId)
    {
        $maxId = (int) $maxId;
        $dc = $this->getEntityManager()->getConnection();
        $sql = "SELECT menu_node.id, menu_node.slug, menu_node.title, menu_node.route, menu_node.is_link_on_id,"
        . " menu_node.before_text, menu_node.after_text, menu_node.created_at"
        . " FROM menu, menu_node"
        . " WHERE menu.id = menu_node.menu_id"
            . " AND menu.code ='" . Menu::STRUCTURE_MENU . "' AND ("
            . " parent_id IS NULL OR parent_id = 0 OR parent_id IN ("
                . " SELECT menu_node.id FROM menu, menu_node"
                . " WHERE menu.id = menu_node.menu_id AND menu.code = '" . Menu::STRUCTURE_MENU . "'"
                . " AND (parent_id IS NULL OR parent_id = 0)  AND menu_node.is_main <> TRUE AND menu_node.is_hidden = FALSE"
                . " AND menu_node.is_published = TRUE AND menu_node.is_deleted = FALSE))"
            . " AND menu_node.is_published = TRUE AND menu_node.is_main <> TRUE AND menu_node.is_hidden = FALSE"
            . " AND menu_node.is_deleted = FALSE AND menu_node.id <= {$maxId} AND menu_node.is_search_indexed = FALSE "
            . " ORDER BY menu_node.id ASC";
        return $dc->fetchAll($sql) ?: [];
    }

    
    /**
     * @param array $indexedMenuNodesId
     * @return bool
     */
    public function updateIsSearchIndexedFlag($indexedMenuNodesId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $result = FALSE;
        
        if (!empty($indexedMenuNodesId)) {
            $sql = 'UPDATE menu_node SET is_search_indexed = TRUE
                    WHERE id IN (' . implode(', ', $indexedMenuNodesId) . ') ';
            $result = $dc->exec($sql);
        }
        
        if($result) {
            return true;
        } else {
            return false;
        }
    }
    
    public function resortingStructure($parentId = null)
    {
        $parent = $parentId === null ? ' AND mn.parent_id IS NULL ' : ' AND mn.parent_id = ' . $parentId;
        $dc = $this->getEntityManager()->getConnection();
        $sql = "UPDATE menu_node AS mn
                SET node_order = node_order + 1	
                FROM menu AS m
                WHERE 
                    m.code = '".Menu::STRUCTURE_MENU."'
                    " . $parent
        ;
        return $dc->executeQuery($sql);
    }
}
