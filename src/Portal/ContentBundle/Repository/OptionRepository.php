<?php
namespace Portal\ContentBundle\Repository;

use Portal\ContentBundle\Entity\Option;

/**
 * OptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OptionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     *
     * Exist
     *
     * @param string $name
     * @param array $params
     *
     * @return  bool
     */
    public function existOption($name, $params = [])
    {
        $queryBuilder = $this->createQueryBuilder('option');
        // exist query
        $existQuery = 'SELECT 1 
            FROM PortalContentBundle:Option o
            WHERE o.name = :name'
        ;
        foreach ($params as $fieldname => $param) {
            $existQuery .= " AND o.{$fieldname} = :{$fieldname}";
            $queryBuilder->setParameter($fieldname, $param);
        }
        $queryBuilder->where(
            $queryBuilder->expr()->exists($existQuery)
        );
        $queryBuilder->setParameter('name', Option::OPTION_START_NAME . $name);

        return $queryBuilder->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }

    /**
     * Get option
     *
     * @param string $name
     * @param array $params
     * @param bool $strong
     */
    public function getOption($name, $params = [], $strong = true)
    {
        $queryBuilder = $this->createQueryBuilder('option');
        if ($strong) {
            $queryBuilder
                ->where('option.name = :name')
                ->setParameter('name', Option::OPTION_START_NAME . $name)
            ;
        } else {
            // Use like
            $queryBuilder
                ->where(
                'option.name like :optionName'
            );
            $queryBuilder->setParameter('optionName', '%' . Option::OPTION_START_NAME . $name . '%');
        }

        foreach ($params as $fieldname => $param) {
            $queryBuilder->andWhere("option.{$fieldname} = :{$fieldname}");
            $queryBuilder->setParameter($fieldname, $param);
        }

        return $queryBuilder->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }

    /**
     * Get option
     *
     * @param string $name
     * @param array $params
     * @param bool $strong
     */
    public function getOptions($name, $params = [], $strong = true)
    {
        $queryBuilder = $this->createQueryBuilder('option');
        if ($strong) {
            $queryBuilder
                ->where('option.name = :name')
                ->setParameter('name', Option::OPTION_START_NAME . $name)
            ;
        } else {
            // Use like
            $queryBuilder
                ->where(
                    'option.name like :optionName'
                );
            $queryBuilder->setParameter('optionName', '%' . Option::OPTION_START_NAME . $name . '%');
        }

        foreach ($params as $fieldname => $param) {
            $queryBuilder->andWhere("option.{$fieldname} = :{$fieldname}");
            $queryBuilder->setParameter($fieldname, $param);
        }

        return $queryBuilder->getQuery()->getResult();
    }
}
