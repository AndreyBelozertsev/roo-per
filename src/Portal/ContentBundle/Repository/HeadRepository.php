<?php

namespace Portal\ContentBundle\Repository;

use Portal\ContentBundle\Entity\Head;

/**
 * HeadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HeadRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllHeadForPagination($filterParam)
    {
        $dc = $this->getEntityManager()->getConnection();

        $params = [];
        if (isset($filterParam['filterTitle']) && $filterParam['filterTitle'] !== '') {
            $params[] = 'LOWER(h.title) LIKE \'%' . trim(mb_strtolower($filterParam['filterTitle'], 'UTF-8')) . '%\'';
        }
        if (isset($filterParam['filterCreateFrom']) && $filterParam['filterCreateFrom'] !== '') {
            $params[] = 'h.created_at >= \'' . date('d.m.Y', strtotime($filterParam['filterCreateFrom'])) . '\'';
        }
        if (isset($filterParam['filterCreateTo']) && $filterParam['filterCreateTo'] !== '') {
            $params[] = 'h.created_at <= \'' . date('d.m.Y', strtotime($filterParam['filterCreateTo'] . '+1 day')) . '\'';
        }
        if (isset($filterParam['filterPublishFrom']) && $filterParam['filterPublishFrom'] !== '') {
            $params[] = 'h.published_at >= \'' . date('d.m.Y', strtotime($filterParam['filterPublishFrom'])) . '\'';
        }
        if (isset($filterParam['filterPublishTo']) && $filterParam['filterPublishTo'] !== '') {
            $params[] = 'h.published_at <= \'' . date('d.m.Y', strtotime($filterParam['filterPublishTo'] . '+1 day')) . '\'';
        }

        $published = (isset($filterParam['filterPublished']) && $filterParam['filterPublished'] === 'true');
        $notPublished = (isset($filterParam['filterPublished']) && $filterParam['filterNotPublished'] === 'true');
        if ($published xor $notPublished) {
            $params[] = 'h.is_published IS ' . ($published ? 'true' : 'false');
        }

        $where = (count($params) !== 0) ? ' WHERE ' . implode(' AND ', $params) : '';

        $sql = 'SELECT h.id, h.firstname, h.middlename, h.lastname'
            . ' , h.published_at as published_at, h.position, h.author_id'
            . ' , h.is_deleted'
            . ' FROM head AS h'
            . $where
            . ' ORDER BY h.published_at DESC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function getHeadList()
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT h.id as id, h.firstname, h.middlename, h.lastname, h.position, h.original_file_path'
            . ', attachment.preview_file_url AS head_file_url'
            . ' FROM head AS h'
            . ' INNER JOIN head_attachment h_a ON h_a.head_id = h.id'
            . ' INNER JOIN attachment ON attachment.id = h_a.id'
            . ' WHERE h.is_published = true '
            . ' AND h.is_deleted = false '
            . ' ORDER BY h.published_at DESC'
        ;

        return $dc->fetchAll($sql) ?: false;
    }

    public function getStructureHeadList($structureId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT h.id as id, h.firstname, h.middlename, h.lastname, h.position, h.original_file_path'
                . ', attachment.preview_file_url AS head_file_url'
            . ' FROM head AS h'
            . ' INNER JOIN head_attachment h_a ON h_a.head_id = h.id'
            . ' INNER JOIN attachment ON attachment.id = h_a.id'
            . ' WHERE h.is_published = true'
                . ' AND h.is_deleted = false'
                . ' AND h.menu_node_id = ' . $dc->quote($structureId, \PDO::PARAM_INT)
            . ' ORDER BY h.sort_order ASC, h.published_at DESC'
        ;

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    /**
     * Get head list for structure in admin
     *
     * @param $structureId
     * @return array
     */
    public function getAdminStructureHeadList($structureId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = 'SELECT h.id, h.firstname, h.middlename, h.lastname, h.is_deleted AS "isDeleted", h.author_id AS author
                FROM head AS h
                WHERE h.menu_node_id = ' . (int)$structureId . '
                  AND h.is_published is TRUE
                ORDER BY h.sort_order ASC, h.published_at DESC'
        ;

        return $dc->fetchAll($sql) ?: [];
    }

    public function setHeadSortOrder($ids)
    {
        $ids = explode(',', $ids);
        $value = [];
        foreach ($ids as $k => $v) {
            $value[] = '(' . (int)$v . ',' . $k . ')';
        }

        $sql = 'UPDATE head AS m'
            . ' SET sort_order = c.sort_order'
            . ' FROM (VALUES '. implode(',', $value) . ') AS c(id, sort_order)'
            . ' WHERE c.id = m.id'
        ;
        $dc = $this->getEntityManager()->getConnection();
        $dc->fetchAll($sql);
    }
}
