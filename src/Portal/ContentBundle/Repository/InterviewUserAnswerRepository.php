<?php

namespace Portal\ContentBundle\Repository;

/**
 * InterviewUserAnswerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterviewUserAnswerRepository extends \Doctrine\ORM\EntityRepository
{
    public function updateIsDraft($uniqueId)
    {
        $date = new \DateTime();
        $currentDate = $date->format('Y-m-d H:i:s');

        $dc = $this->getEntityManager()->getConnection();
        $sql = 'UPDATE interview_user_answer
                SET is_draft = FALSE, date_passing = \'' . $currentDate . '\'
                WHERE unique_id = ' . $dc->quote($uniqueId, \PDO::PARAM_STR)
        ;

        return $dc->executeQuery($sql);
    }

    public function getStatisticAnswer($interviewId)
    {
//        $sql = "SELECT
//                    ia.content AS answer,
//                    iq.content AS question,
//                    (SELECT COUNT(DISTINCT(iua3.unique_id))
//                        FROM interview_question AS iq3
//                        LEFT JOIN interview_user_answer AS iua3 ON iq3.id = iua3.interview_question_id
//                        WHERE iq3.id = iq.id AND iua3.is_skip IS FALSE
//                        GROUP BY iq3.id) AS question_voted,
//                    COUNT(iua.interview_answer_id) AS voted,
//                    (
//                      COUNT(iua.interview_answer_id) * 10000 /
//                      (SELECT COUNT(iua2.interview_question_id)
//                        FROM interview_user_answer AS iua2
//                        WHERE iua2.interview_question_id = iq.id AND iua2.is_skip IS FALSE
//                        GROUP BY iua2.interview_question_id)
//                    ) AS percent
//                FROM interview_question AS iq
//                LEFT JOIN interview_answer AS ia ON iq.id = ia.interview_question_id
//                LEFT JOIN interview_user_answer AS iua ON iua.interview_answer_id = ia.id
//                WHERE iq.interview_id = {$dc->quote($interviewId, \PDO::PARAM_INT)}
//                GROUP BY ia.content, iq.content, iq.id
//                ORDER BY iq.id"
//        ;
        $sql = 'SELECT
                  ia.content AS answer,
                  iq.content AS question,
                  iq.is_required,
                  (
                    SELECT COUNT(DISTINCT (iua2.unique_id))
                    FROM interview_question AS iq2
                      LEFT JOIN interview_user_answer AS iua2 ON iq2.id = iua2.interview_question_id
                    WHERE iq2.id = iq.id AND iua2.is_skip IS FALSE AND iua2.is_draft IS NOT TRUE
                  ) AS question_voted,
                  (
                    SELECT COUNT(DISTINCT (unique_id))
                    FROM interview_user_answer
                    WHERE interview_answer_id = ia.id AND is_skip IS FALSE AND is_draft IS NOT TRUE
                  ) AS voted,
                  (
                    (
                      SELECT COUNT(DISTINCT (unique_id))
                      FROM interview_user_answer
                      WHERE interview_answer_id = ia.id AND is_skip IS FALSE AND is_draft IS NOT TRUE
                    ) * 10000 / (
                      SELECT CASE WHEN COUNT(interview_question_id) > 0 THEN COUNT(interview_question_id) ELSE 1 END
                      FROM interview_user_answer
                      WHERE interview_question_id = iq.id AND is_skip IS FALSE AND is_draft IS NOT TRUE
                    )
                  ) AS percent
                FROM interview_question AS iq
                  LEFT JOIN interview_answer AS ia ON iq.id = ia.interview_question_id
                  LEFT JOIN interview_user_answer AS iua ON iua.interview_answer_id = ia.id
                WHERE iq.interview_id = ' . (int)$interviewId . '
                GROUP BY ia.content, iq.content, iq.id, ia.id
                ORDER BY iq.id'
        ;
        $dc = $this->getEntityManager()->getConnection();

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getVoted($interviewId)
    {
        $sql = 'SELECT COUNT(DISTINCT iua.unique_id)
                FROM interview AS i
                LEFT JOIN interview_question AS iq ON iq.interview_id = i.id
                LEFT JOIN interview_user_answer AS iua ON iua.interview_question_id = iq.id
                WHERE i.id = ' . (int)$interviewId . '
                  AND iua.is_draft IS NOT true
                  AND iua.content IS NULL'
        ;
        $dc = $this->getEntityManager()->getConnection();

        return $dc->executeQuery($sql)->fetchColumn() ?: false;
    }

    public function getInterviewAllAnswerList($interviewId)
    {
        $sql = 'SELECT 
                  iua.unique_id AS "unique", 
                  iua.date_passing AS date_pass,
                  iq.content AS question,
                  iua.interview_question_id,
                  (
                    SELECT string_agg((CASE WHEN iua2.content IS NOT NULL THEN iua2.content ELSE ia2.content END)::varchar, \', \') AS answers
                    FROM interview_user_answer AS iua2
                    LEFT JOIN interview_answer AS ia2 ON ia2.id = iua2.interview_answer_id 
                    WHERE iua2.interview_question_id = iq.id AND iua2.unique_id = iua.unique_id
                  ) AS answer
                FROM interview_user_answer AS iua
                LEFT JOIN interview_question AS iq ON iq.id = iua.interview_question_id 
                WHERE iq.interview_id = ' . (int)$interviewId . ' AND iua.is_draft IS NOT TRUE 
                GROUP BY iq.id, iua.unique_id, iua.interview_question_id, iua.date_passing
                ORDER BY iua.date_passing ASC, iua.unique_id ASC'
        ;
        $dc = $this->getEntityManager()->getConnection();

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getInterviewVotedList($interviewId, $lastUserAnswerId = null)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sqlLastUserAnswerId = ' ';
        if ($lastUserAnswerId !== null) {
            $sqlLastUserAnswerId = ' AND iua.id > ' . $dc->quote($lastUserAnswerId, \PDO::PARAM_INT);
        }

        $sql = '
          SELECT DISTINCT iua.unique_id, iua.date_passing, MAX(iua.id) as max_id 
          FROM interview_user_answer AS iua
          LEFT JOIN interview_question AS iq ON iq.id = iua.interview_question_id 
          WHERE iq.interview_id = '. $dc->quote($interviewId, \PDO::PARAM_INT) .' AND iua.is_draft IS FALSE '
          . $sqlLastUserAnswerId .
          ' GROUP BY iua.unique_id, iua.date_passing ORDER BY  iua.date_passing, max_id ASC'
        ;

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }

    public function getVotedAnswerList($uniqueId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = '
            SELECT 
                iua.unique_id AS "unique", 
                iua.date_passing AS date_pass, 
                iua.interview_question_id, 
                ( 
                    SELECT string_agg((CASE WHEN iua2.content IS NOT NULL THEN iua2.content ELSE ia2.content END)::varchar, \', \') AS answers 
                    FROM interview_user_answer AS iua2 
                    LEFT JOIN interview_answer AS ia2 ON ia2.id = iua2.interview_answer_id 
                    WHERE iua2.interview_question_id = iq.id 
                        AND iua2.unique_id = iua.unique_id 
                ) AS answer 
            FROM interview_user_answer AS iua 
            LEFT JOIN interview_question AS iq ON iq.id = iua.interview_question_id 
            WHERE iua.unique_id = '. $dc->quote($uniqueId, \PDO::PARAM_STR) .' AND iua.is_draft IS FALSE
            GROUP BY iq.id, iua.unique_id, iua.interview_question_id, iua.date_passing
            ORDER BY iua.interview_question_id ASC'
        ;

        return $dc->executeQuery($sql)->fetchAll() ?: [];
    }


    /**
     * @param integer $interviewId
     * @return boolean
     */
    public function updateDraftUserAnswer($interviewId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = "
            UPDATE interview_user_answer AS iua_u
                SET is_draft = TRUE
                WHERE iua_u.unique_id IN (
                   SELECT 
                      iua_qs.unique_id
                   FROM interview_user_answer AS iua_qs
                   LEFT JOIN interview_question AS iq_qs ON iq_qs.id = iua_qs.interview_question_id
                   WHERE 
                      iq_qs.is_required IS TRUE 
                      AND iua_qs.is_draft IS NOT TRUE
                      AND iq_qs.interview_id = {$dc->quote($interviewId, \PDO::PARAM_INT)}
                   GROUP BY iua_qs.unique_id
                   HAVING count(iua_qs.id) <> (
                      SELECT 
                         COUNT(id)
                      FROM interview_question AS iq
                      WHERE iq.is_required IS TRUE AND iq.interview_id = {$dc->quote($interviewId, \PDO::PARAM_INT)}
                   )
                )
        ";

        return $dc->executeQuery($sql);
    }

    public function isVotedDependentAnswer($idAnswer, $uniqueId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = "SELECT CASE WHEN COUNT((SELECT
            iua.id
            FROM interview_user_answer AS iua
            WHERE iua.unique_id = ". $dc->quote($uniqueId, \PDO::PARAM_STR) ." AND iua.interview_answer_id = ". $dc->quote($idAnswer, \PDO::PARAM_INT) .")) > 0 THEN TRUE ELSE FALSE END
        ";
        return $dc->executeQuery($sql)->fetchColumn();
    }

    public function isUserAnswer($interviewId, $userId)
    {
        $dc = $this->getEntityManager()->getConnection();
        $sql = "
            SELECT 
              CASE WHEN COUNT(iua.user_id) > 0 THEN TRUE ELSE FALSE END AS qqq
            FROM interview AS i
            LEFT JOIN interview_question AS iq ON iq.interview_id = i.id
            LEFT JOIN interview_user_answer AS iua ON iua.interview_question_id = iq.id
            WHERE 
                i.id = {$dc->quote($interviewId, \PDO::PARAM_INT)}
                AND iua.user_id = {$dc->quote($userId, \PDO::PARAM_INT)}
        ";
        return $dc->executeQuery($sql)->fetchColumn();
    }
}
